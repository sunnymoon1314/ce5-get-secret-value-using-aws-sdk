name: Workflow to get the secret(s) from AWS Secret Manager.
# - How to Run Python Scripts in GitHub Action Workflows, Data Engineering With Nick, 1.43K subscribers
#   https://www.youtube.com/watch?v=zk4bSTD8uWM

on:
  workflow_dispatch:
    inputs:
      language:
          type: choice
          options:
              - c#
              - c++
              - go
              - java
              - javascript
              - python
              - ruby
              - rust
          description: Select the language to run.

jobs:
  pre-action-step:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Print language
        run: | 
          echo "language selected is ${{ inputs.language }}"

  cpp-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build source code
        run: gcc -Wall -Werror -Wextra -pedantic -std=gnu89 */*.cpp -o output

      - name: Run build
        run: ./output

      - name: Clean build
        run: rm -f output

  ruby-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run program
        run: |
          ruby ruby/get-secret.rb

  rust-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check that code can compile
        run: |
          cargo check  # Run the cargo check command
          cargo test --verbose
          cargo build --verbose

  java-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Run program
        run: |
          ls -la
          java java/get-secret.java

  csharp-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      # - name: Build and Test
      #  run: dotnet build && dotnet test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Compile get-secret.cs
        run: |
          dotnet build --runtime linux-x64
          # https://www.nuget.org/
          dotnet add package Microsoft.EntityFrameworkCore
          dotnet add package AWSSDK.Core;
          dotnet add package AWSSDK.SecretsManager;
          dotnet add package AWSSDK.SecretsManager.Model;
          dotnet build csharp/get-secret.csproj --source ./csharp --output ./output
    if: 0 == 1

  go-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.19' # The Go version to download (if necessary) and use.

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - run: |
          go mod init get-secret
          go get github.com/aws/aws-sdk-go-v2
          go get github.com/aws/aws-sdk-go-v2/config
          go get github.com/aws/aws-sdk-go-v2/service/secretsmanager
          go run go/get-secret.go
    if: 0 == 1

  python-get-secret:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository.
        uses: actions/checkout@v4

      - name: Setup Python 3.12.
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Install Python Dependencies.
        run: |
          echo "Install Python Dependencies."
          python -m pip install -r python3/requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run python python3/get-secret.py.
        run: |
            echo "Run python python3/get-secret.py."
            python python3/get-secret.py
    if: 0 == 1
